const mongoose = require("mongoose");
const validator = require("validator");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Task = require("./Task");

const userSchema = new mongoose.Schema({
  // IMPORTANT - We dont want multiple users with the same email account
  // So we will use mongoose's "unique" ppt to get this done
  email: {
    type: String,
    unique: true,
    required: false,
    validate(value) {
      if (!validator.isEmail(value)) {
        throw new Error("Email is invalid");
      }
    },
    trim: true,
    lowercase: true,
  },
  password: {
    type: String,
    required: true,
    trim: true,
    minlength: 7,
    validate(value) {
      if (value.toLowerCase().includes("password")) {
        throw new Error("Invalid Password Entered");
      }
    },
  },
  name: {
    type: String,
    required: true,
    trim: true,
  },
  age: {
    type: Number,
    validate(value) {
      if (value < 0) {
        throw new Error("Age should be positive");
      }
    },
    default: 0,
  },
  // tokens is an array of objects
  // Such objects are called sub-documents
  // All documents and their sub-documents have their own _id field, automatically generated by mongo.
  tokens: [
    {
      token: {
        type: String,
        required: true,
      },
    },
  ],
});

// Virtual ppt doesnt get stored in DB, it is created by mongoose and can be used just like a regular ppt.
// Will setup a virtual property that creates a link between user and all of its tasks
userSchema.virtual("tasks", {
  ref: "Task",
  localField: "_id", // local field jisse matching karwani he
  foreignField: "owner", // foreign field jispe matching hogi
});

// Adding an instance method
// IMP - isko bhi normal function ki tarah hi define karna padega due to the "this" keyword.
userSchema.methods.generateAuthToken = async function () {
  const user = this;

  const token = await jwt.sign({ _id: user._id.toString() }, "iamvengeance", {
    expiresIn: "7 days",
  });

  // adding the token to the user instance
  user.tokens = user.tokens.concat({ token });
  // saving the user instance with the new token value
  await user.save();

  return token;
};

// VERY IMPORTANT -
// Instance method to get the public profile
// Jab bhi mai res.send(<some js object>) kar raha tha to express behind the scenes usse
// JSON.stringify() kar raha tha
// About toJSON -
// In JavaScript, the JSON.stringify() function looks for functions named toJSON in the object being serialized. If an object has a toJSON function, JSON.stringify() calls toJSON() and serializes the return value from toJSON() instead.
// TO yaha pe basically mai user object pe toJSON method define kar raha hu.
userSchema.methods.toJSON = function () {
  const user = this;

  // toObject() is a mongoose method that returns a js object of user instance
  // without virtual ppts. Not necessary for now.
  const userObj = user.toObject();
  delete userObj.password;
  delete userObj.tokens;
  return userObj;
};

// Adding a static method (model method) to the User schema
// Model methods mai "this" ki baat hi ni hui to no need for normal function
// arrow function will work
userSchema.statics.findByCredentials = async (email, password) => {
  const user = await User.findOne({ email });

  if (!user) {
    throw new Error("Unable to login");
  }

  const isMatch = await bcrypt.compare(password, user.password);

  if (!isMatch) {
    throw new Error("Unable to login");
  }

  return user;
};

// IMP - Instance methods and Model methods dono SCHEMA pe hi DEFINE hote he.

// IMPORTANT - Yaha "this" binding ka imp use he, to normal function hi declare karna padega.
// Arrow function won't do the job.
// instance pe "save" function run hone ke pehle (pre) following middleware chalega
userSchema.pre("save", async function (next) {
  // our user object is stored in "this"
  const user = this;

  // hash the password only if it was modified
  if (user.isModified("password")) {
    user.password = await bcrypt.hash(user.password, 8);
  }

  // call next when we are done with our middleware's body
  next();
});

// delete user tasks when the user gets deleted
// ie AFTER executing user.remove()
userSchema.post("remove", async function () {
  const user = this;
  await Task.deleteMany({ owner: user._id });
});

const User = mongoose.model("User", userSchema);

module.exports = User;
